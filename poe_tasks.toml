# PoeThePoet task definitions
# https://poethepoet.natn.io/

# Configure poe to use uv executor to ensure 'poe lint' uses same env as 'uv run poe lint'
[tool.poe]
executor.type = "uv"

[tool.poe.tasks]

# Linting and formatting
lint = "ruff check ."
format = "ruff format ."
format-check = "ruff format --check ."
md-lint = "mdformat --check *.md docs/"
md-lint-fix = "mdformat *.md docs/"

# Testing
test = "pytest"
test-fast = "pytest -x"
test-cov = "pytest --cov=reeltrust --cov-report=html"
test-unit = "pytest -m unit"
test-integration = "pytest -m integration"

# Combined tasks
check = ["format-check", "md-lint", "lint", "test"]
fix = ["format", "md-lint-fix", "lint --fix"]

# Build and install
install = "uv sync --extra dev"
install-prod = "uv sync"
build = "uv build"

# Development helpers
clean = "rm -rf .pytest_cache .coverage htmlcov dist .ruff_cache"
version = { "shell" = "echo 'reeltrust version:' && python -c 'import reeltrust; print(reeltrust.__version__)'" }

# Download full video+audio by URL or video ID
yt-download.cmd = "yt-dlp --format 'best[ext=mp4]/best' --merge-output-format mp4 https://www.youtube.com/watch?v=$video_id"
yt-download.help = "Download YouTube video by its ID. Wrapper for 'yt-dlp https://www.youtube.com/watch?v=${video_id}'"
yt-download.args = ["video_id"]

# Predefined test clips
yt-soccer = "yt-dlp --format 'best[ext=mp4]/best' --merge-output-format mp4 https://www.youtube.com/watch?v=FiCSAKiUZpU --output .data/inputs/soccer-orig-7KXGZAEWzn0.mp4"
yt-obama = "yt-dlp --format 'best[ext=mp4]/best' --merge-output-format mp4 https://www.youtube.com/watch?v=LEo7lzfpdCU --output .data/inputs/obama-orig-LEo7lzfpdCU.mp4"
yt-whales = "yt-dlp --format 'best[ext=mp4]/best' --merge-output-format mp4 https://www.youtube.com/watch?v=o767PuYbEXg --output .data/inputs/whales-orig-o767PuYbEXg.mp4"

download-yt-test-clips.help = "Download all predefined YouTube test clips to: .data/inputs/"
download-yt-test-clips.sequence = [
    "yt-soccer",
    "yt-obama",
    "yt-whales",
]

[tool.poe.tasks.typecheck]
help = "Run type checking with mypy"
cmd = "echo 'Type checking not yet configured - consider adding mypy'"

[tool.poe.tasks.security]
help = "Run security checks with bandit"
cmd = "echo 'Security scanning not yet configured - consider adding bandit'"

[tool.poe.tasks.deps]
help = "Check for unused and missing dependencies"
cmd = "deptry ."

# Pre-commit style combined task
[tool.poe.tasks.pre-commit]
help = "Run all pre-commit checks"
sequence = ["format", "lint", "test-fast"]

# System dependencies (macOS only)
[tool.poe.tasks.install-system-deps]
help = "Install system dependencies (ffmpeg, chromaprint) via Homebrew (macOS only)"
shell = """
if command -v brew >/dev/null 2>&1; then
    echo "Installing system dependencies via Homebrew..."
    brew install ffmpeg chromaprint
else
    echo "Error: Homebrew not found. Please install Homebrew first: https://brew.sh"
    exit 1
fi
"""
